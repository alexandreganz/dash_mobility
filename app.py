"""
This app creates an animated sidebar using the dbc.Nav component and some local
CSS. Each menu item has an icon, when the sidebar is collapsed the labels
disappear and only the icons remain. Visit www.fontawesome.com to find
alternative icons to suit your needs!

dcc.Location is used to track the current location, a callback uses the current
location to render the appropriate page content. The active prop of each
NavLink is set automatically according to the current pathname. To use this
feature you must install dash-bootstrap-components >= 0.11.0.

For more details on building multi-page Dash applications, check out the Dash
documentation: https://dash.plot.ly/urls
"""
import dash
import dash_bootstrap_components as dbc
from dash import Input, Output, dcc, html
from dash.dependencies import Input, Output, State
import dash_gif_component as gif
import pandas as pd
import plotly.express as px
import numpy as np
import geopandas as gpd
from keplergl import KeplerGl

from data_processing import process_files

from visualization import *


PLOTLY_LOGO = "assets/SimMobility_logo.png"

app = dash.Dash(external_stylesheets=[dbc.themes.BOOTSTRAP, dbc.icons.FONT_AWESOME])

sidebar = html.Div(
    [
        html.Div(
            [
                # width: 3rem ensures the logo is the exact width of the
                # collapsed sidebar (accounting for padding)
                html.Img(src=PLOTLY_LOGO, style={"width": "3rem"}),
                html.H2("Locations"),
            ],
            className="sidebar-header",
        ),
        html.Hr(),
        dbc.Nav(
            [
                dbc.NavLink(
                    [html.I(className="fa fa-home me-2"), html.Span("Home")],
                    href="/",
                    active="exact",
                ),
                dbc.NavLink(
                    [html.I(className="fa fa-car me-2"), html.Span("Virtual City")],
                    href="/Virtual_City",
                    active="exact",
                ),
                dbc.NavLink(
                    [
                        html.I(className="fa fa-taxi me-2"),
                        html.Span("Boston"),
                    ],
                    href="/Boston",
                    active="exact",
                ),
                dbc.NavLink(
                    [
                        html.I(className="fa fa-bus me-2"),
                        html.Span("Singapoore"),
                    ],
                    href="/Singapore",
                    active="exact",
                ),
            ],
            vertical=True,
            pills=True,
        ),
    ],
    className="sidebar",
)


content = html.Div(id="page-content", className="content")


main_page = html.Div(
    [
        dbc.Row(dbc.Col(html.H1("Welcome to SimMobility Visualization"))),
        html.Hr(),
        dbc.Row(
            [
                dbc.Col(
                    html.Div(
                        [
                            html.H2("Purpose"),
                            html.Div(
                                "The under-construction SimMobility visualization tool developed by DTU Transport Department aims to enhance the analysis and interpretation of simulation data generated by the SimMobility platform. It holds promise for providing valuable insights to researchers and practitioners in the field of urban mobility, contributing to improved transportation planning and optimization in urban environments."
                            ),
                        ]
                    )
                ),
                dbc.Col(
                    html.Div(
                        [
                            html.H2("How to Use"),
                            dcc.Markdown(
                                """
                                 Below you will see an example of how to use the tool. The main focus is to optimize the data analysis of your simulation. In this case remember to have the csv version of the file called subtrip_metrics. In case you have any doubts, you can check [here](https://github.com/smart-fm/simmobility-prod/wiki/Mid-Term-Output)
                                 the output files of the Mid Day process.
                                 Currently the tool is configured to only view Mid Day data, specifically submetrics, however we will be working to expand the analysis to other generated files.
                                 """
                            ),
                        ]
                    )
                ),
            ]
        ),
        html.Hr(),
        dbc.Row(
            [
                dbc.Col(
                    html.Div(
                        [
                            html.H2("Available Simulated Locations"),
                            html.Div(
                                [
                                    html.P(
                                        "SimMobility Visualization is currently available for the following simulated locations:"
                                    ),
                                    dcc.Markdown(
                                        """
                                             - Virtual City &#x2714
                                             - Boston &#x2714
                                             - Singapore &#x2714
                                             - Copenhagen (under development) &#x2718
                                             """
                                    ),
                                ]
                            ),
                        ]
                    )
                ),
                dbc.Col(
                    html.Div(
                        [
                            html.H2("Outputs Available to Visualize:"),
                            html.P(
                                "SimMobility has several output files generated by each simulation, so far the files that are fully functional are:"
                            ),
                            dcc.Markdown(
                                """
                                            - subtrip_metrics.csv &#x2714
                                            """
                            ),
                        ]
                    )
                ),
            ]
        ),
        html.Hr(),
        dbc.Row(
            [
                dbc.Col(
                    html.Div(
                        [
                            html.H2("Use Guide"),
                            html.P(
                                "The goal of SimMobility Visualization is to be very simple for the User, just upload your submetric files press the button and visualize!"
                            ),
                            gif.GifPlayer(
                                gif="assets/Sim_User_guide.gif",
                                still="assets/my-still.png",
                            ),
                        ]
                    )
                )
            ]
        ),
    ],
)



dropdown_options_histogram = [
                                {"label": "Education", "value": "education_category"},
                                {"label": "Income", "value": "range_income"}
                            ]



vc_content = html.Div(
    [
        html.H2("Drop your Subtrip.csv files below"),
        html.P("This is the text container where you can put your text."),
        dcc.Upload(
            ["Drag and Drop or ", html.A("Select a File")],
            style={
                "width": "100%",
                "height": "60px",
                "lineHeight": "60px",
                "borderWidth": "1px",
                "borderStyle": "dashed",
                "borderRadius": "5px",
                "textAlign": "center",
            },
            id="upload-data",
            multiple=True,
        ),
        html.Div(id="file-list"),
        html.Button("Process Files", id="transform-button", n_clicks=0),
        html.Hr(),
        dcc.Loading(
            id="loading",
            type="default",
            children=[
                html.Div(
                    [
                        
                        html.Div(id="visualization-1", style={"display": "none"}),
                        dbc.Row(
                           [
                               dbc.Col(html.Div(id="fig-tours-container")),
                               dbc.Col(html.Div("One of three columns")),
                           ] 
                        ),
                        dbc.Row(
                            [
                                dbc.Col(
                                    dcc.Dropdown(
                                        id="color-dropdown",
                                        options=dropdown_options_histogram,
                                        value="education_category",
                                        clearable=False,
                                        style={"display": "none"},
                                    )
                                ),
                                html.Div(id="fig-trips-container")# Add this line
                            ]
                        ),
                        html.Iframe(id='map-iframe', src='',height='1000', width='1000'),
                    ]
                )
            ],
        ),
        html.Div(id="alert-message"),
    ],
    id="page-content",
    className="vc-content",
)


@app.callback(
    [
        Output("visualization-1", "children"),
        Output("visualization-1", "style"),
        Output("color-dropdown", "style"),
        Output("alert-message", "children"),
        Output("fig-tours-container", "children"),
        Output("fig-trips-container", "children"),
        Output('map-iframe', 'srcDoc')
    ],
    [
        Input("transform-button", "n_clicks"),
        Input("color-dropdown", "value"),
    ],
    [State("upload-data", "contents")],
    prevent_initial_call=True,
)
def process_uploaded_files(n_clicks, color_value, contents):
    if contents is None or len(contents) == 0:
        return (
            [],
            {"display": "none"},
            {"display": "none"},
            html.Div("Please upload files before processing."),
            None,
            None,
            '',
        )
    else:
        combined_data = process_files(contents)

        if combined_data is not None:
            fig_trips = trips_day(combined_data)
            fig_tour = tours_person(combined_data)
            fig = create_histogram_plot(combined_data, color_value)
            
            zones = gpd.read_file('data/shp_files/sm_zone.shp')
            zones.to_crs(epsg=4326)
            
            trips_df = combined_data[['person_id','start_time','travel_time','origin_lat','origin_long','destination_lat','destination_long']]

            trips_df['start_time'] = trips_df['start_time'].dt.strftime('%Y-%m-%d %H:%M:%S') 
            
            config = {}
            exec(open("hex_config.py").read(), config)
            config = config["config"]
            map_1 = KeplerGl(height=800, data={'zones': zones, 'trips_df': trips_df}, config=config)
            map_1.save_to_html(file_name="map_kepler.html")

            with open('map_kepler.html', 'r') as f:
                kepler_html = f.read()
            
            return [
                dcc.Graph(figure=fig_trips),
                {"display": "block"},
                {"display": "block"},
                "",
                dcc.Graph(figure=fig_tour),
                dcc.Graph(figure=fig),
                kepler_html,
            ]
        else:
            return (
                [],
                {"display": "none"},
                {"display": "none"},
                html.Div("No file uploaded yet."),
                None,
                None,
                '',
            )



@app.callback(
    Output("file-list", "children"),
    [Input("upload-data", "filename")],
    prevent_initial_call=True,
)
def update_file_list(filenames):
    if filenames:
        return html.Ul([html.Li(filename) for filename in filenames])
    else:
        return html.Div("No files selected.")


app.layout = html.Div([dcc.Location(id="url"), sidebar, content])


# set the content according to the current pathname
@app.callback(Output("page-content", "children"), Input("url", "pathname"))
def render_page_content(pathname):
    if pathname == "/":
        return main_page
    elif pathname == "/Virtual_City":
        return vc_content
    elif pathname == "/Boston":
        return html.P("This is your calendar... not much in the diary...")
    elif pathname == "/Singapore":
        return html.P("Here are all your messages")
    # If the user tries to reach a different page, return a 404 message
    return html.Div(
        [
            html.H1("404: Not found", className="text-danger"),
            html.Hr(),
            html.P(f"The pathname {pathname} was not recognised..."),
        ],
        className="p-3 bg-light rounded-3",
    )


if __name__ == "__main__":
    app.run_server(debug=True)
